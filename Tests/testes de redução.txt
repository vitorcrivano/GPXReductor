

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.ArrayList;

import javax.xml.parsers.ParserConfigurationException;

import org.junit.Test;
import org.xml.sax.SAXException;

import MathLogic.TrackPointReductor;
import Model.Track;
import Model.TrackPoint;
import XMLTreatment.XmlReader;
import Routine.Reductor;

public class TrackPointReductorTest {

        //new TrackPoint
	static private TrackPoint createNewTrackPoint(String latitude, String longitude, String ele, String time) {
		TrackPoint trackPoint = new TrackPoint(Float.valueOf(latitude),Float.valueOf(longitude),Float.valueOf(ele),time);	
		return trackPoint;
	}
        
        @Test
        //points at the same line??
	public void testPointsAtTheSameLine() {
		double distance = 0;
		assertTrue(TrackPointReductor.pointsAtTheSameLine(distance));
	}
        
	@Test
	//empty list??
	public void testEmptyList() {
		
		ArrayList<TrackPoint> trackPointlist = new ArrayList<TrackPoint>();
		TrackPoint trackPoint = createNewTrackPoint("42.049849", "-71.266615", "104.921021", "2002-03-06T07:42:13Z");
		trackPointlist.add(trackPoint);
		
		assertFalse(TrackPointReductor.emptyList(trackPointlist));
	}
	
	@Test
	//has TrackPoints?
	public void testHasTrackPoints() {
		
		//Reading the file
		ArrayList<Track> trackList = new ArrayList<Track>();
		String testFile = "../GPXReductor/src/Files/foxboroTest.gpx";
		
		try {
			trackList = XmlReader.ReadXML(testFile);
		} catch (IOException | ParserConfigurationException | SAXException e) {
			e.printStackTrace();
		}
		
	    //Getting the TrackPoint list read
		ArrayList<TrackPoint> trackPointsRead = new ArrayList<TrackPoint>();
	    trackPointsRead = trackList.get(0).getSegments().get(0).getTrackPoints();
	    
	    //Creating and adding TrackPoints to a list
	    ArrayList<TrackPoint> trackPointlist = new ArrayList<TrackPoint>();
	    TrackPoint firstTrackPoint = createNewTrackPoint("42.050664", "-71.267238", "63.584351", "2002-03-06T04:23:07Z");	
	    trackPointlist.add(firstTrackPoint);
	    TrackPoint secTrackPoint = createNewTrackPoint("43.050664", "-72.267238", "64.584351", "2002-03-06T05:20:07Z");	
	    trackPointlist.add(secTrackPoint);
	    
	    assertFalse(TrackPointReductor.emptyList(trackPointlist));
	}
	
	@Test
	//are the TrackPoints in the same place??
	public void testTrackPointsInSamePlace() {
		
		ArrayList<TrackPoint> trackPointlist = new ArrayList<TrackPoint>();
		TrackPoint firstTrackPoint = createNewTrackPoint("42.049849", "-71.266615", "104.921021", "2002-03-06T07:42:13Z");
		trackPointlist.add(firstTrackPoint);
		TrackPoint secondTrackPoint = createNewTrackPoint("42.049849", "-71.266615", "94.346558", "2002-03-06T07:43:53Z");
		trackPointlist.add(secondTrackPoint);
		
		assertTrue(TrackPointReductor.pointsAtTheSamePlace(firstTrackPoint, secondTrackPoint));
	}
        
       @Test
	//it's correctly removing by distance??
	public void testRemoveByPercentage() {
		String testFile = "../GPXReductor/src/Files/foxboro.gpx";
		
	    ArrayList<Track> trackList = new ArrayList<Track>();
	    ArrayList<TrackPoint> trackPointsRead = new ArrayList<TrackPoint>();
	  		
	    try {
			trackList = XmlReader.ReadXML(testFile);
		} catch (IOException | ParserConfigurationException | SAXException e) {
			e.printStackTrace();
		}
	  		
	    //Reduction
	    trackList = Reductor.reduceTrack(trackList, "10%");
	    
	    //Gets the TrackPoint list read
	    trackPointsRead = trackList.get(0).getSegments().get(0).getTrackPoints();
	    
	    //Creating and adding the expected TrackPoints output to a list
	    ArrayList<TrackPoint> trackPointlist = new ArrayList<TrackPoint>();
            
	    TrackPoint firstTrackPoint = createNewTrackPoint("44.02248083", "-123.1245669", "261.135252", "2007-02-18T03:34:31Z");	
	    trackPointlist.add(firstTrackPoint);
            
	    TrackPoint secondTrackPoint = createNewTrackPoint("44.02280848", "-123.124453", "261.615965", "2007-02-18T03:36:03Z");	
	    trackPointlist.add(secondTrackPoint);
            
	    TrackPoint thirdTrackPoint = createNewTrackPoint("44.02267361", "-123.1244789", "261.615966", "2007-02-18T03:36:28Z");	
	    trackPointlist.add(thirdTrackPoint);
	    
	    assertEquals(trackPointlist.size(), trackPointsRead.size());
	    
	    
	    for (int i = 0; i < trackPointsRead.size(); i++) {
		    float firstElement = trackPointlist.get(i).getEle();
		    float secondElement = trackPointsRead.get(i).getEle();
		    
	        //delta is 0.5
	        assertEquals(firstElement, secondElement, 0.5); 
            
            }
        }
	
	@Test
	//it's correctly removing by distance??
	public void testRemoveByDistance() {
		String testInputFileName = "../GPX_Project/src/unirio/pm/gpx/file/foxboro-remover-test.gpx";
		
	    ArrayList<Track> trackList = new ArrayList<Track>();
	    ArrayList<TrackPoint> trackPointsRead = new ArrayList<TrackPoint>();
	  		
	    try {
			trackList = XmlReader.ReadXML(testInputFileName);
		} catch (IOException | ParserConfigurationException | SAXException e) {
			e.printStackTrace();
		}
	  		
	    //Reduction
	    trackList = Reductor.reduceTrack(trackList, "0.01");
	    
	    //Gets the TrackPoint list read
	    trackPointsRead = trackList.get(0).getSegments().get(0).getTrackPoints();
	    
	    //Creating and adding the expected TrackPoints output to a list
	    ArrayList<TrackPoint> trackPointlist = new ArrayList<TrackPoint>();
            
	    TrackPoint firstTrackPoint = createNewTrackPoint("44.02248083", "-123.1245669", "261.135252", "2007-02-18T03:34:31Z");	
	    trackPointlist.add(firstTrackPoint);
            
	    TrackPoint secondTrackPoint = createNewTrackPoint("44.02280848", "-123.124453", "261.615965", "2007-02-18T03:36:03Z");	
	    trackPointlist.add(secondTrackPoint);
            
	    TrackPoint thirdTrackPoint = createNewTrackPoint("44.02267361", "-123.1244789", "261.615966", "2007-02-18T03:36:28Z");	
	    trackPointlist.add(thirdTrackPoint);
	    
	    assertEquals(trackPointlist.size(), trackPointsRead.size());
	    
	    
	    for (int i = 0; i < trackPointsRead.size(); i++) {
		    float firstElement = trackPointlist.get(i).getEle();
		    float secondElement = trackPointsRead.get(i).getEle();
		    
	        //delta is 0.5
	        assertEquals(firstElement, secondElement, 0.5); 
            
           }
        }
}	
